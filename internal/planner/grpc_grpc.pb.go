// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: grpc.proto

package planner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlannerClient is the client API for Planner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlannerClient interface {
	CalculateOptimalReplicas(ctx context.Context, in *CalculateOptimalReplicasRequest, opts ...grpc.CallOption) (*CalculateOptimalReplicasResponse, error)
}

type plannerClient struct {
	cc grpc.ClientConnInterface
}

func NewPlannerClient(cc grpc.ClientConnInterface) PlannerClient {
	return &plannerClient{cc}
}

func (c *plannerClient) CalculateOptimalReplicas(ctx context.Context, in *CalculateOptimalReplicasRequest, opts ...grpc.CallOption) (*CalculateOptimalReplicasResponse, error) {
	out := new(CalculateOptimalReplicasResponse)
	err := c.cc.Invoke(ctx, "/planner.Planner/CalculateOptimalReplicas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlannerServer is the server API for Planner service.
// All implementations must embed UnimplementedPlannerServer
// for forward compatibility
type PlannerServer interface {
	CalculateOptimalReplicas(context.Context, *CalculateOptimalReplicasRequest) (*CalculateOptimalReplicasResponse, error)
	mustEmbedUnimplementedPlannerServer()
}

// UnimplementedPlannerServer must be embedded to have forward compatible implementations.
type UnimplementedPlannerServer struct {
}

func (UnimplementedPlannerServer) CalculateOptimalReplicas(context.Context, *CalculateOptimalReplicasRequest) (*CalculateOptimalReplicasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateOptimalReplicas not implemented")
}
func (UnimplementedPlannerServer) mustEmbedUnimplementedPlannerServer() {}

// UnsafePlannerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlannerServer will
// result in compilation errors.
type UnsafePlannerServer interface {
	mustEmbedUnimplementedPlannerServer()
}

func RegisterPlannerServer(s grpc.ServiceRegistrar, srv PlannerServer) {
	s.RegisterService(&Planner_ServiceDesc, srv)
}

func _Planner_CalculateOptimalReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateOptimalReplicasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlannerServer).CalculateOptimalReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/planner.Planner/CalculateOptimalReplicas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlannerServer).CalculateOptimalReplicas(ctx, req.(*CalculateOptimalReplicasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Planner_ServiceDesc is the grpc.ServiceDesc for Planner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Planner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "planner.Planner",
	HandlerType: (*PlannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateOptimalReplicas",
			Handler:    _Planner_CalculateOptimalReplicas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
